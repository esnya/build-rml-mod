name: Build RML Mod
description: Build Mod for ResoniteModLoader. Use after checkout.
inputs:
  project:
    description: 'Path to the project directory'
    required: true
    default: ${{ github.workspace }}
  configuration:
    description: 'Build configuration'
    required: true
    default: 'Release'
  target-dir:
    description: 'Output directory for the build'
    required: true

  steam-login:
    description: 'Login credentials for SteamCMD. "<username> <password>"'
    required: true
  app-id:
    description: 'Steam App ID'
    required: true
    default: '2519830'

  cache-key:
    description: 'Cache key for the app'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Setup SteamCMD
      uses: CyberAndrii/setup-steamcmd@v1.2.0

    - name: Cache app
      uses: actions/cache@v4
      with:
        path: ${{ inputs.project }}/Resonite/
        key: ${{ inputs.cache-key || format('rml-mod-{0}-{1}', inputs.app-id, inputs.configuration) }}

    - name: Update app
      shell: pwsh
      run: steamcmd +force_install_dir ${{ inputs.project }}/Resonite +login ${{ inputs.steam-login }} +app_update ${{ inputs.app-id }} validate +quit

    - name: Prepare directories
      shell: pwsh
      run: |
        mkdir -p ${{ inputs.project }}/Resonite/Libraries/
        mkdir -p ${{ inputs.project }}/Resonite/rml_libs/
      continue-on-error: true

    - name: Install ResoniteModLoader
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/ResoniteModLoader.dll -OutFile ${{ inputs.project }}/Resonite/Libraries/ResoniteModLoader.dll
        Invoke-WebRequest -Uri https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/0Harmony.dll -OutFile ${{ inputs.project }}/Resonite/rml_libs/0Harmony.dll

    - name: Restore the application
      shell: pwsh
      run: msbuild /t:Restore /p:Configuration=${{ inputs.configuration }}
      working-directory: ${{ inputs.project }}

    - name: Build the application
      shell: pwsh
      run: msbuild ${{ inputs.project }} /p:Configuration=${{ inputs.configuration }} /p:OutputPath=${{ inputs.target-dir || format('{0}/bin/{1}', github.workspace, inputs.configuration) }}
      working-directory: ${{ inputs.project }}
